version: '3.7'
services:
  api:
    container_name: api-service
    image: woaiso/wst-service
    depends_on:
      - mongodb
    ports:
      - 7001:7001
    links:
      - mongodb
    environment:
      - PORT=7001

  mongodb:
    container_name: api-mongodb
    image: mongo
    volumes:
      - ./database:/data/db
    ports:
      - 27017:27017

  image:
    container_name: api-image
    image: woaiso/wst-image
    ports:
      - 5000:5000

  nginx:
    container_name: nginx
    image: woaiso/docker-tengine:2.0.3
    volumes:
      - ./sites_conf:/etc/nginx/sites-enabled
      - ./www:/data/www
      - ./ssl:/data/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - mongodb
      - api
      - image
      - registry
    links:
      - api
      - image
      - registry
    ports:
      - '80:80'
      - '443:443'
  registry:
    container_name: registry-hub
    image: registry:2
    volumes:
      - ./registry:/var/lib/registry
    ports:
      - 5001:5001
    environment:
      - REGISTRY_HTTP_ADDR=0.0.0.0:5001

  #ELK
  elasticsearch:
    container_name: elasticsearch
    hostname: elasticsearch
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    #Healthcheck to confirm availability of ES. Other containers wait on this.
    healthcheck:
      test: ["CMD", "curl","-s" ,"-f", "-u", "elastic:${ES_PASSWORD}", "http://localhost:9200/_cat/health"]
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: ${ES_PASSWORD}
    networks:
      - elk
  logstash:
    container_name: logstash
    hostname: logstash
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "4000:5000"
      - "9600:9600"
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
      - "ELASTICSEARCH_USER=${ES_USER}"
      - "ELASTICSEARCH_PASSWORD=${ES_PASSWORD}"
    networks:
      - elk
    depends_on:
      - elasticsearch
  kibana:
    container_name: kibana
    hostname: kibana
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch
    restart: on-failure
    environment:
      - "ELASTICSEARCH_USER=${ES_USER}"
      - "ELASTICSEARCH_PASSWORD=${ES_PASSWORD}"
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:5601/login"]
      retries: 6
  filebeat:
    container_name: filebeat
    hostname: filebeat
    user: root
    build:
      context: filebeat/
      args:
        ELK_VERSION: $ELK_VERSION
    command: filebeat -e -E output.elasticsearch.username=${ES_USER} -E output.elasticsearch.password=${ES_PASSWORD} -strict.perms=false
    volumes:
      #Mount the filebeat configuration readonly
      - ./filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      #Mount the docker logs for indexing by the custom prospector ./config/filebeat/prospectors.d
      - /var/lib/docker/containers:/var/lib/docker/containers
      #Mount the nginx logs into the filebeat container so we can access and index them using the filebeat nginx module
      - ./logs/nginx/:/var/log/nginx/
    networks:
      - elk
    depends_on:
      #wait for the these services to come up. This ensures the logs are available and ES exists for indexing
      - elasticsearch
      - nginx
    restart: on-failure
    environment:
      - "ELASTICSEARCH_USER=${ES_USER}"
      - "ELASTICSEARCH_PASSWORD=${ES_PASSWORD}"
networks:
  elk:
    driver: bridge

volumes:
  elasticsearch: